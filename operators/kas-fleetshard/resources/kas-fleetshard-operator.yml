---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: kas-fleetshard-operator
    app.kubernetes.io/name: kas-fleetshard-operator
  name: kas-fleetshard-operator
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kas-fleetshard-operator
  name: kas-fleetshard-operator
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app.kubernetes.io/name: kas-fleetshard-operator
  type: ClusterIP
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: kas-fleetshard-operator
  name: kas-fleetshard-operator-view
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: view
subjects:
- kind: ServiceAccount
  name: kas-fleetshard-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kas-fleetshard-operator
    app.kubernetes.io/name: kas-fleetshard-operator
  name: kas-fleetshard-operator
rules:
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  # the Strimzi bundle manager checks if Strimzi operator related CRDs are installed
  - 'customresourcedefinitions'
  verbs:
  - get
  - list
  - watch  
- apiGroups:
  - managedkafka.bf2.org
  resources:
  - managedkafkas
  - managedkafkas/status
  - managedkafkaagents
  - managedkafkaagents/status
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - kafka.strimzi.io
  resources:
  - kafkas
  - kafkas/status
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  - deployments/status
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
    - apps
  resources:
    # operator needs to get ReplicaSets for discovering Strimzi installations
    - replicasets
  verbs:
    - get
    - list
    - watch
- apiGroups:
  - ""
  resources:
  - services
  - configmaps
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  - routes/custom-host
  - routes/status
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
    - admissionregistration.k8s.io
  resources:
    # created by the OLM for the DrainCleaner
    - validatingwebhookconfigurations
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - operators.coreos.com
  resources:
    # the operator watches Subscriptions for Strimzi bundle installation
    - subscriptions
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - packages.operators.coreos.com
  resources:
    # the operator get PackageManifests for Strimzi bundle installation
    - packagemanifests
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - operators.coreos.com
  resources:
    # the operator get/update InstallPlan for Strimzi bundle installation
    - installplans
  verbs:
    - get
    - list
    - watch
    - patch
    - update
- apiGroups:
    - ""
  resources:
    # the operator reads pods to get assigned node to get AZ information
    - pods
    # the operator reads nodes to get AZ information
    - nodes
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - operator.openshift.io
  resources:
    # the operator creates IngressControllers in the openshift-ingress-operator namespace
    - ingresscontrollers
  verbs:
    - get
    - list
    - watch
    - create
    - delete
    - patch
    - update
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kas-fleetshard-operator
    app.kubernetes.io/name: kas-fleetshard-operator
  name: kas-fleetshard-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kas-fleetshard-operator
      app.kubernetes.io/name: kas-fleetshard-operator
  template:
    metadata:
      labels:
        app: kas-fleetshard-operator
        app.kubernetes.io/name: kas-fleetshard-operator
      name: kas-fleetshard-operator
    spec:
      serviceAccountName: kas-fleetshard-operator
      priorityClassName: kas-fleetshard-high
      volumes:
      - configMap:
          defaultMode: 384
          name: operator-logging-config-override
          optional: true
        name: logging-config-volume
      imagePullSecrets:
      - name: rhoas-image-pull-secret
      containers:
      - name: kas-fleetshard-operator
        image: quay.io/mk-ci-cd/kas-fleetshard-operator:0.13.1
        env:
        - name: QUARKUS_PROFILE
          value: prod
        - name: ADMINSERVER_CORS_ALLOWLIST
          value: "(https?:\\/\\/localhost(:\\d*)?)|(https:\\/\\/(qaprodauth\\.)?cloud\\.redhat\\.com)|(https:\\/\\/(prod|qa|ci|stage)\\.foo\\.redhat\\.com:1337)"
        - name: KAFKA_EXTERNAL_CERTIFICATE_ENABLED
          value: 'false'
        - name: KAFKA_AUTHENTICATION_ENABLED
          value: 'true'
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /q/health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /q/health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 1500m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - mountPath: /config
          name: logging-config-volume
          readOnly: false
          subPath: ""
